// <auto-generated />
using System;
using Diagnosticos.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Diagnosticos.Persistence.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211203143202_Especialidades")]
    partial class Especialidades
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Diagnosticos")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Diagnosticos.Domain.DetalleDiagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Diagnostico_Id")
                        .HasColumnType("int");

                    b.Property<int>("Pregunta_Id")
                        .HasColumnType("int");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Diagnostico_Id");

                    b.ToTable("DetallesDiagnosticos");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Especialidad_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Paciente_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Especialidad_Id");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Enfermedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Enfermedades");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Es la rama de la medicina que se especializa en la salud y las enfermedades de los niños. Se trata de una especialidad médica que se centra en los pacientes desde el momento del nacimiento hasta la adolescencia.",
                            Nombre = "Pediatría"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "La cardiología es la rama de la medicina que se encarga del estudio, diagnóstico y tratamiento de las enfermedades del corazón y del aparato circulatorio.",
                            Nombre = "Cardiología"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Es la especialidad médica que se ocupa de las enfermedades del aparato digestivo y órganos asociados, conformado por: esófago, estómago, hígado y vías biliares, páncreas, intestino delgado (duodeno, yeyuno, íleon), colon y recto. El médico que practica esta especialidad se llama gastroenterólogo o especialista en aparato digestivo.",
                            Nombre = "Gastroenterología"
                        });
                });

            modelBuilder.Entity("Diagnosticos.Domain.Opcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Pregunta_Id")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Pregunta_Id");

                    b.ToTable("Opciones");
                });

            modelBuilder.Entity("Diagnosticos.Domain.PosibleEnfermedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Diagnostico_Id")
                        .HasColumnType("int");

                    b.Property<int>("Enfermedad_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Porcentaje")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("Id");

                    b.HasIndex("Diagnostico_Id");

                    b.HasIndex("Enfermedad_Id");

                    b.ToTable("PosiblesEnfermedades");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Especialidad_Id")
                        .HasColumnType("int");

                    b.Property<bool>("TieneOpciones")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Especialidad_Id");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("Diagnosticos.Domain.DetalleDiagnostico", b =>
                {
                    b.HasOne("Diagnosticos.Domain.Diagnostico", "Diagnostico")
                        .WithMany("DetallesDiagnostico")
                        .HasForeignKey("Diagnostico_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diagnosticos.Domain.Pregunta", "Pregunta")
                        .WithMany("DetallesDiagnosticos")
                        .HasForeignKey("Diagnostico_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Diagnostico", b =>
                {
                    b.HasOne("Diagnosticos.Domain.Especialidad", "Especialidad")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("Especialidad_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Opcion", b =>
                {
                    b.HasOne("Diagnosticos.Domain.Pregunta", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("Pregunta_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("Diagnosticos.Domain.PosibleEnfermedad", b =>
                {
                    b.HasOne("Diagnosticos.Domain.Diagnostico", "Diagnostico")
                        .WithMany("PosiblesEnfermedades")
                        .HasForeignKey("Diagnostico_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diagnosticos.Domain.Enfermedad", "Enfermedad")
                        .WithMany("PosiblesEnfermedades")
                        .HasForeignKey("Enfermedad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Enfermedad");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Pregunta", b =>
                {
                    b.HasOne("Diagnosticos.Domain.Especialidad", "Especialidad")
                        .WithMany("Preguntas")
                        .HasForeignKey("Especialidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Diagnostico", b =>
                {
                    b.Navigation("DetallesDiagnostico");

                    b.Navigation("PosiblesEnfermedades");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Enfermedad", b =>
                {
                    b.Navigation("PosiblesEnfermedades");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Especialidad", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("Diagnosticos.Domain.Pregunta", b =>
                {
                    b.Navigation("DetallesDiagnosticos");

                    b.Navigation("Opciones");
                });
#pragma warning restore 612, 618
        }
    }
}
